1. For every additional element, why are adding it?

I will explain how I improved the performance and  reliability of  my website by adding
a new server and a load balancer. A load balancer is a device that distributes incoming
traffic across multiple servers, ensuring that no single server is overloaded or becomes
a bottleneck. By adding a new server, I increased the capacity of my website to handle more
requests and reduced the risk of downtime. Here are the main benefits of using a load balancer:

- Improved availability: If one server fails, the load balancer can redirect the traffic to 
                        another server that is still working, minimizing the impact on the users.
- Enhanced scalability: As the demand for my website grows, I can easily add more servers to the
                        load balancer without affecting the existing ones.
- Reduced latency: By distributing the traffic evenly, the load balancer can reduce the response
                    time of my website and improve the user experience.
- Increased security: The load balancer can act as a firewall and protect my servers from malicious
                        attacks or unauthorized access.

In summary, adding a new server and a load balancer was a smart decision that improved the
            performance and reliability of my website.

2. What distribution algorithm your load balancer is configured with and how it works?

My load balancer uses the Round Robin algorithm which connects in order unless a server is 
down. The requests are served by the server sequentially one after another. After sending the 
request to the last server, it starts from the first server again. This algorithm is used 
when servers has an equal specification and there are not many persistent connections.

3. Is your load-balancer enabling an Active-Active or Active-Passive setup? Let's explain.

Yes, my load-balancer is set up in an Active-Passive setup. The load balancer enables an Active-Active
setup where both servers are actively running the same kind of service simultaneously. While in an Active-Passive
setup, not all nodes are going to be active. In the case of two nodes, if the first node is already active,
the second node must be passive or on standby.

The key difference between these two architectures is performance. Active-active clusters give you access to the
resources of all your servers during normal operation. In an active-passive cluster, the backup server only sees
action during failover.

4. How a database Primary-Replica (Master-Slave) cluster works? 

A primary-replica cluster is a configuration where one database server (the primary or master) is the source of truth for the data, and one or more other database servers (the replicas or slaves) are copies of the data. The primary server records the changes to the data in a log, which is then transferred to the replicas. Depending on the timing of the data transfer, the replication can be synchronous or asynchronous. Synchronous replication means that the changes are applied to both the primary and the replica at the same time, ensuring that they are always consistent. Asynchronous replication means that the changes are stored in a queue and applied to the replica later, allowing for some lag between the primary and the replica. The main benefit of using a primary-replica cluster is to distribute the read workload across multiple servers, improving the scalability and performance of the system. However, it can also be used for other purposes, such as providing backup and recovery options, or performing data analysis on the replica without affecting the primary.

5. What is the difference between the Primary node and the Replica node in regard to
the application?

One of the benefit of having replica nodes is that they can handle read requests, such as searching
or retrieving documents, from your application. This can improve the performance and scalability
of your application, especially if you have a high volume of read operations. You can distribute
the read load across multiple replica nodes and reduce the pressure on the primary node.

To summarize, the difference between the primary node and the replica node in Database is that
the primary node is responsible for write operations, while the replica node is a read-only copy
of the primary node that provides redundancy and scalability for your application.

## What are SPOF issues with Distributed infrastructure?

The major single point of failure in this infrastructure is having only one load balancer. If the load balancer fails, the entire system will be unavailable, as there is no backup or redundancy for it. This can lead to significant downtime and loss of revenue for the business.

How to avoid SPOF? 
One way to avoid SPOF is to use multiple load balancers in a cluster, so that if one fails, the others can take over the traffic. This can improve the availability and reliability of the system, as well as the performance and scalability. Another way to avoid SPOF is to use a cloud service provider that offers load balancing as a service, such as AWS Elastic Load Balancing or Google Cloud Load Balancing. These services can automatically distribute the traffic across multiple servers and regions, and handle failover and recovery scenarios.

## Security issues (no firewall, no HTTPS) with Distributed infrastructure?

Distributed infrastructure is a popular way of deploying applications across multiple servers or locations, but it also comes with some challenges. One of the most critical ones is security, as distributed systems are exposed to more risks than centralized ones. i will try explain some of the common security issues that distributed infrastructure faces and how to prevent or mitigate them.

One of the main security issues is the lack of encryption and authentication in the communication between the application components. If the application uses HTTP protocol, which is plain text, it means that anyone who intercepts the network traffic can see the data that is being exchanged, including sensitive information like passwords or personal details. This can lead to data breaches, identity theft, or other malicious attacks. To avoid this, the application should use HTTPS protocol, which encrypts the data and verifies the identity of the sender and receiver. HTTPS also protects against man-in-the-middle attacks, where an attacker modifies or redirects the network traffic.

Another security issue is the absence of a firewall, which is a software or hardware device that filters the incoming and outgoing network traffic based on predefined rules. A firewall can block unauthorized or malicious connections, such as those from hackers or bots. Without a firewall, the application is vulnerable to denial-of-service attacks, where an attacker floods the system with requests to overwhelm it and make it unavailable. A firewall can also prevent data exfiltration, where an attacker steals data from the system by exploiting open ports or vulnerabilities. A firewall should be configured to allow only the necessary connections and deny all others by default.

## Issues with Distributed infrastructure, No monitoring? 

The Importance of Monitoring in Distributed Infrastructure

Distributed infrastructure is a common way of deploying and scaling applications across multiple servers, locations, or cloud platforms. However, managing such a complex system can pose many challenges, especially when it comes to monitoring. Without proper monitoring, distributed infrastructure can suffer from performance issues, security breaches, or unexpected failures that can affect the business and the users negatively. In this blog post, we will discuss why monitoring is essential for distributed infrastructure and how it can benefit the owners and the users.

Monitoring is the process of collecting, analyzing, and displaying data about the status and performance of a system. It can help identify and troubleshoot problems, optimize resources, and ensure reliability and availability. Monitoring can also provide valuable insights into user behavior, traffic patterns, and usage trends that can inform business decisions and improve customer satisfaction.

Some of the benefits of monitoring distributed infrastructure are:

- Detecting and resolving issues faster: Monitoring can alert the owners when something goes wrong with the server, website, or application, such as high latency, low throughput, or errors. This can help them fix the problem quickly before it escalates or affects other parts of the system. Monitoring can also help identify the root cause of the issue and prevent it from happening again in the future.
- Improving productivity and efficiency: Monitoring can help optimize the performance and resource utilization of the distributed infrastructure by identifying bottlenecks, load balancing, and scaling up or down as needed. This can improve the speed and quality of the service and reduce operational costs and waste.
- Enhancing security and compliance: Monitoring can help protect the distributed infrastructure from cyberattacks by detecting and blocking malicious activities, such as unauthorized access, data breaches, or denial-of-service attacks. Monitoring can also help comply with regulatory standards and policies by logging and auditing the system activities and ensuring data privacy and integrity.
- Increasing user satisfaction and loyalty: Monitoring can help improve the user experience by ensuring that the server, website, or application is always up and running smoothly and reliably. Monitoring can also help measure and improve user satisfaction by collecting feedback, ratings, reviews, or testimonials. This can help build trust and loyalty among the users and attract new customers.

As you can see, monitoring is a vital component of distributed infrastructure that can bring many benefits to the owners and the users. However, monitoring distributed infrastructure can also be challenging due to its complexity, diversity, and dynamism. Therefore, it is important to choose a suitable monitoring tool that can handle the specific needs and requirements of the distributed infrastructure. Some of the features to look for in a monitoring tool are:

- Scalability: The monitoring tool should be able to handle large volumes of data from multiple sources without compromising performance or accuracy.
- Flexibility: The monitoring tool should be able to adapt to different types of distributed infrastructure, such as cloud-based, hybrid, or on-premise.
- Integration: The monitoring tool should be able to integrate with other tools and platforms that are part of the distributed infrastructure, such as databases, web servers, or APIs.
- Customization: The monitoring tool should be able to customize the data collection, analysis, visualization, and alerting according to the preferences and goals of the owners.
- Automation: The monitoring tool should be able to automate some of the monitoring tasks, such as data aggregation, anomaly detection, or notification.

In conclusion, monitoring is a crucial aspect of distributed infrastructure that can help ensure its optimal performance, security, reliability, and user satisfaction. However, monitoring distributed infrastructure requires a suitable tool that can cope with its challenges and provide useful insights. Therefore, it is important to research and compare different monitoring tools before choosing one that fits your needs.
